
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DFT 0
#define DSK 1
#define WMK 2
#define NBC 3
#define NVW 4
#define NVM 5
#define FU 6

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_ret {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp RETURN>;
        };
        combo_rsh {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp RSHFT>;
        };
        combo_squote {
            timeout-ms = <50>;
            key-positions = <19 20 21>;
            bindings = <&kp SQT>;
        };
        combo_backtick {
            timeout-ms = <50>;
            key-positions = <31 32 33>;
            bindings = <&kp GRAVE>;
        };
        combo_dquote {
            timeout-ms = <50>;
            key-positions = <7 8 9>;
            bindings = <&kp DQT>;
        };
    };
};
/ {
    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            bindings = <
                                   &lt DSK Q    &kp W        &kp E        &kp R        &kp T         &kp Y        &kp U        &kp I        &kp O        &kp P
                                   &lt NVM A    &kp S        &kp D        &kp F        &kp G         &kp H        &kp J        &kp K        &kp L        &kp SEMI
                                   &mt LSHFT Z        &kp X        &kp C        &kp V        &kp B         &kp N        &kp M        &kp COMMA    &kp DOT      &kp FSLH
                                                         &mt LALT GRAVE    &kp LGUI     &lt NBC SPACE    &lt FU TAB   &kp BSPC     &mt LCTRL ESC     
            >;
        };
        tab_layer {
            bindings = <
                                   &trans       &kp LC(LEFT)    &kp LC(RIGHT)   &trans       &kp LC(UP)       &trans       &trans       &trans       &trans       &trans
                                   &trans       &trans       &trans       &trans       &trans        &trans       &trans       &trans       &trans       &trans
                                   &trans       &trans       &trans       &trans       &trans        &trans       &trans       &trans       &trans       &trans
                                                         &trans       &trans       &kp LG(SPACE)    &trans       &trans       &trans      
            >;
        };
        winmask_layer {
            bindings = <
                                   &trans       &trans       &trans       &trans       &trans        &trans       &trans       &trans       &trans       &trans
                                   &lt NVW A    &trans       &trans       &trans       &trans        &trans       &trans       &trans       &trans       &trans
                                   &trans       &trans       &trans       &trans       &trans        &trans       &trans       &trans       &trans       &trans
                                                         &trans       &trans       &trans        &trans       &trans       &trans      
            >;
        };
        space_layer {
            bindings = <
                                   &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT     &kp CARET    &kp AMPS     &kp KP_MULTIPLY   &kp LPAR     &kp RPAR
                                   &kp NUMBER_1     &kp NUMBER_2     &kp NUMBER_3     &kp NUMBER_4     &kp NUMBER_5      &kp MINUS    &kp EQUAL    &kp BSLH     &kp LBKT     &kp RBKT
                                   &kp NUMBER_6     &kp NUMBER_7     &kp NUMBER_8     &kp NUMBER_9     &kp NUMBER_0      &kp UNDER    &kp PLUS     &kp PIPE     &kp LBRC     &kp RBRC
                                                         &trans       &trans       &trans        &trans       &trans       &trans      
            >;
        };
        caps_layer_win {
            bindings = <
                                   &kp C_PP     &kp C_PREV   &kp C_NEXT   &kp CAPS     &kp C_AC_REFRESH     &kp PG_UP    &kp LG(LEFT)    &kp UP       &kp LG(RIGHT)   &kp PG_DN
                                   &kp C_VOL_DN   &kp C_VOL_UP     &kp LG(LS(NUMBER_4))      &kp LG(LS(NUMBER_5))      &trans        &kp LA(LEFT)    &kp LEFT     &kp DOWN     &kp RIGHT    &kp LA(RIGHT)
                                   &trans       &trans       &trans       &trans       &tog WMK      &trans       &kp LC(MINUS)   &trans       &kp LC(PLUS)    &trans
                                                         &trans       &trans       &trans        &trans       &none        &trans      
            >;
        };
        caps_layer_mac {
            bindings = <
                                   &kp TAB      &kp C_PP     &kp C_PREV   &kp C_NEXT   &kp CAPS      &kp LA(LEFT)    &kp LG(LEFT)    &kp UP       &kp LG(RIGHT)   &kp LA(RIGHT)
                                   &trans       &kp C_VOL_DN   &kp C_VOL_UP     &kp LG(LS(NUMBER_4))      &kp LG(LS(NUMBER_5))       &kp LA(LEFT)    &kp LEFT     &kp DOWN     &kp RIGHT    &kp DEL
                                   &trans       &trans       &trans       &trans       &trans        &trans       &kp LC(MINUS)   &trans       &kp LC(PLUS)    &trans
                                                         &trans       &trans       &trans        &trans       &none        &trans      
            >;
        };
        r2_layer {
            bindings = <
                                   &trans       &trans       &trans       &trans       &trans        &bt BT_CLR    &trans       &trans       &trans       &bt BT_SEL 0
                                   &kp F1       &kp F2       &kp F3       &kp F4       &kp F5        &trans       &kp LEFT     &kp DOWN     &trans       &bt BT_SEL 1
                                   &kp F6       &kp F7       &kp F8       &kp F9       &kp F10       &trans       &kp LC(MINUS)   &trans       &trans       &bt BT_SEL 2
                                                         &kp F11      &kp RGUI     &kp LG(SPACE)    &trans       &trans       &trans      
            >;
        };
    };
};
    